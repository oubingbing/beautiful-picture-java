package com.kucaroom.mypicture.aspect;import antlr.StringUtils;import com.kucaroom.mypicture.DTO.UserDTO;import com.kucaroom.mypicture.enums.ResponseEnum;import com.kucaroom.mypicture.exception.ApiException;import com.kucaroom.mypicture.service.UserService;import com.kucaroom.mypicture.util.JwtUtil;import lombok.extern.slf4j.Slf4j;import org.aspectj.lang.annotation.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.context.request.ServletRequestAttributes;import javax.servlet.http.HttpServletRequest;@Slf4j@Aspect@Componentpublic class WeChatAuth {    @Autowired    private JwtUtil jwtUtil;    @Autowired    private UserService userService;    /**     * 拦截具体控制器下的所有方法     */    @Pointcut("execution(public * com.kucaroom.mypicture.controller.checkAuth.*.*(..))")    public void init(){    }    @Before("init()")    public void auth(){        //记录http请求的信息        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();        HttpServletRequest request = attributes.getRequest();        String token = request.getHeader("Authorization");        if(org.springframework.util.StringUtils.isEmpty(token)){            throw new ApiException(ResponseEnum.JWT_TOKEN_DECODE_ERROR);        }        String opendId = jwtUtil.parse(token);        log.info("openId: {}",opendId);        if(org.springframework.util.StringUtils.isEmpty(opendId)){            throw new ApiException(ResponseEnum.JWT_TOKEN_DECODE_ERROR);        }        UserDTO userDTO = userService.findUserByOpenId(opendId);        if(userDTO == null){            throw new ApiException(ResponseEnum.USER_NOT_EXIST);        }        request.setAttribute("openId",opendId);        request.setAttribute("appId",userDTO.getAppId());        request.setAttribute("userId",userDTO.getId());    }    @After("init()")    public void response(){    }    /**     * 获取返回的数据对象     * @param object     */    @AfterReturning(returning = "object",pointcut = "init()")    public void responseData(Object object){        log.info("object={}",object);    }}