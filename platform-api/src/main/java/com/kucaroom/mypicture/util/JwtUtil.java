package com.kucaroom.mypicture.util;import com.auth0.jwt.JWT;import com.auth0.jwt.JWTVerifier;import com.auth0.jwt.algorithms.Algorithm;import com.auth0.jwt.exceptions.JWTCreationException;import com.auth0.jwt.exceptions.JWTDecodeException;import com.auth0.jwt.exceptions.JWTVerificationException;import com.auth0.jwt.exceptions.TokenExpiredException;import com.auth0.jwt.interfaces.DecodedJWT;import com.kucaroom.mypicture.config.JwtConfig;import com.kucaroom.mypicture.enums.ResponseEnum;import com.kucaroom.mypicture.exception.ApiException;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.Date;@Slf4j@Servicepublic class JwtUtil {    @Autowired    private JwtConfig jwtConfig;    /**     * 生成token     *     * @param openid     * @return     */    public String create(String openid){        try {            Date expireAt = DateUtil.addSecond(3600*24*7);            Algorithm algorithm = Algorithm.HMAC256(jwtConfig.getSecretKey());            String token = JWT.create()                    .withIssuer("system")                    .withSubject(openid)                    .withExpiresAt(expireAt)                    .sign(algorithm);            return token;        } catch (JWTCreationException exception){            return exception.getMessage();        }    }    /**     * 解析token     *     * @param token     * @return     */    public String parse(String token){        try {            Algorithm algorithm = Algorithm.HMAC256(jwtConfig.getSecretKey());            JWTVerifier verifier = JWT.require(algorithm)                    .withIssuer("system")                    .build();            DecodedJWT jwt = verifier.verify(token);            return jwt.getSubject();        } catch (JWTVerificationException exception){            if(exception instanceof JWTDecodeException){                throw new ApiException(ResponseEnum.JWT_TOKEN_DECODE_ERROR);            }else if(exception instanceof TokenExpiredException){                throw new ApiException(ResponseEnum.JWT_TOKEN_EXPIRE);            }else{                throw new ApiException(500,exception.getMessage());            }        }    }}