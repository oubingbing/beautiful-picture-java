package com.kucaroom.mypicture.service.impl;import com.kucaroom.mypicture.convert.PictureItemToPictureItemRO;import com.kucaroom.mypicture.domain.Picture;import com.kucaroom.mypicture.domain.PictureItem;import com.kucaroom.mypicture.repository.PictureItemRepository;import com.kucaroom.mypicture.responseObject.PictureItemRO;import com.kucaroom.mypicture.service.PictureItemService;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.domain.Specification;import org.springframework.stereotype.Service;import javax.persistence.criteria.CriteriaBuilder;import javax.persistence.criteria.CriteriaQuery;import javax.persistence.criteria.Predicate;import javax.persistence.criteria.Root;import java.util.ArrayList;import java.util.List;import java.util.Optional;@Slf4j@Servicepublic class PictureItemServiceImpl implements PictureItemService {    @Autowired    private PictureItemRepository repository;    @Override    public PictureItem findById(Integer id) {        Optional<PictureItem> pictureItemOptional = repository.findById(id);        if(pictureItemOptional.isPresent()){            PictureItem pictureItem = pictureItemOptional.get();            return pictureItem;        }        return null;    }    @Override    public List<PictureItemRO> pictureItems(Integer pictureId, Pageable pageable) {        Specification<PictureItem> specification = new Specification<PictureItem>() {            //测试            @Override            public Predicate toPredicate(Root<PictureItem> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {                List<Predicate> predicateList = new ArrayList<>();                predicateList.add(criteriaBuilder.equal(root.get("pictureId"),pictureId));                return criteriaBuilder.and(predicateList.toArray(new Predicate[predicateList.size()]));            }        };        Page<PictureItem> picturePage = repository.findAll(specification,pageable);        return PictureItemToPictureItemRO.convert(picturePage.getContent());    }}