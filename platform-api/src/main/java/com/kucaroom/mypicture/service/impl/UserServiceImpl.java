package com.kucaroom.mypicture.service.impl;import com.kucaroom.mypicture.DTO.UserDTO;import com.kucaroom.mypicture.config.UrlConfig;import com.kucaroom.mypicture.exception.ApiException;import com.kucaroom.mypicture.form.LoginForm;import com.kucaroom.mypicture.repository.UserRepository;import com.kucaroom.mypicture.service.UserService;import com.kucaroom.mypicture.service.WeChatAppService;import com.kucaroom.mypicture.util.AesCbcUtil;import com.kucaroom.mypicture.domain.User;import com.kucaroom.mypicture.domain.WeChatApp;import com.kucaroom.mypicture.enums.ResponseEnum;import com.kucaroom.mypicture.util.HttpRequestUtil;import lombok.extern.slf4j.Slf4j;import net.sf.json.JSONObject;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.Optional;@Service@Slf4jpublic class UserServiceImpl implements UserService {    @Autowired    private UserRepository userRepository;    @Autowired    private WeChatAppService weChatAppService;    @Autowired    private UrlConfig urlConfig;    /**     * 新建用户     *     * @author yezi     * @param userDTO     * @return     */    @Override    public UserDTO createUser(UserDTO userDTO) {        User user = new User();        BeanUtils.copyProperties(userDTO,user);        User result = userRepository.save(user);        if(result == null){            throw new ApiException(ResponseEnum.USER_CREATE_FAIL);        }        userDTO.setId(result.getId());        return userDTO;    }    /**     * 根据openID查找用户     *     * @param openId     * @return     */    @Override    public UserDTO findUserByOpenId(String openId) {        User user = userRepository.findByOpenId(openId);        if(user == null){            return null;        }        UserDTO userDTO = new UserDTO();        BeanUtils.copyProperties(user,userDTO);        return userDTO;    }    /**     * 获取openID     *     * @param loginForm     * @return     */    @Override    public UserDTO userLogin(LoginForm loginForm){        String allianceKey = loginForm.getAllianceKey();        String code = loginForm.getCode();        WeChatApp app = weChatAppService.findByAppAllianceKey(allianceKey);        if(app == null){            throw new ApiException(ResponseEnum.APP_NOT_EXIST);        }        String url = urlConfig.getWeChatUrl();        String params = "appid="+app.getAppKey()+"&secret="+app.getAppSecret()+"&js_code="+code+"&grant_type=authorization_code";        String result = HttpRequestUtil.sendGet(url,params);        //解密用户数据        JSONObject json = JSONObject.fromObject(result);        String sessionKey = json.get("session_key").toString();        UserDTO decodeResult = this.decodeUser(sessionKey,loginForm.getEncryptedData(), loginForm.getIv(), code);        decodeResult.setAppId(app.getId());        //用户是否已存在        UserDTO existUser = this.findUserByOpenId(decodeResult.getOpenId());        if(existUser != null){            return  existUser;        }        UserDTO createResult = this.createUser(decodeResult);        return createResult;    }    /**     * 解密用户数数据     *     * @author yezi     *     * @param sessionKey     * @param encryptedData     * @param iv     * @param code     * @return     */    @Override    public UserDTO decodeUser(String sessionKey,String encryptedData, String iv, String code) {        try {            String result = AesCbcUtil.decrypt(encryptedData, sessionKey, iv, "UTF-8");            if (null != result && result.length() > 0) {                JSONObject userInfoJSON = JSONObject.fromObject(result);                UserDTO userDTO = new UserDTO();                userDTO.setOpenId((String) userInfoJSON.get("openId"));                userDTO.setNickname((String) userInfoJSON.get("nickName"));                userDTO.setGender((Integer) userInfoJSON.get("gender"));                userDTO.setCity((String) userInfoJSON.get("city"));                userDTO.setProvince((String) userInfoJSON.get("province"));                userDTO.setCountry((String)userInfoJSON.get("country"));                userDTO.setAvatar((String)userInfoJSON.get("avatarUrl"));                userDTO.setUnionId((String) userInfoJSON.get("unionId"));                return userDTO;            }        } catch (Exception e) {            e.printStackTrace();        }        throw new ApiException(ResponseEnum.USER_DECODE_USER_FAIL);    }    @Override    public UserDTO finById(Integer userId) {        Optional<User> userOption = userRepository.findById(userId);        User user = userOption.get();        if(user == null){                return null;        }        UserDTO userDTO = new UserDTO();        BeanUtils.copyProperties(user,userDTO);        return userDTO;    }}