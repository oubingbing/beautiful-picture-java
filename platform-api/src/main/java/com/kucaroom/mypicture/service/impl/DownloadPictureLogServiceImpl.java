package com.kucaroom.mypicture.service.impl;import com.kucaroom.mypicture.DTO.UserDTO;import com.kucaroom.mypicture.domain.CollectPictureLog;import com.kucaroom.mypicture.domain.DownLoadPictureLog;import com.kucaroom.mypicture.domain.PictureItem;import com.kucaroom.mypicture.enums.DownloadPictureType;import com.kucaroom.mypicture.enums.ResponseEnum;import com.kucaroom.mypicture.exception.ApiException;import com.kucaroom.mypicture.repository.DownLoadPictureLogRepository;import com.kucaroom.mypicture.service.DownloadPictureLogService;import com.kucaroom.mypicture.service.PictureItemService;import com.kucaroom.mypicture.service.UserService;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.domain.Specification;import org.springframework.stereotype.Service;import javax.persistence.criteria.CriteriaBuilder;import javax.persistence.criteria.CriteriaQuery;import javax.persistence.criteria.Predicate;import javax.persistence.criteria.Root;import java.util.ArrayList;import java.util.List;@Slf4j@Servicepublic class DownloadPictureLogServiceImpl implements DownloadPictureLogService {    @Autowired    private DownLoadPictureLogRepository repository;    @Autowired    private UserService userService;    @Autowired    private PictureItemService pictureItemService;    /**     * 保存图片下载记录     *     * @author yezi     * @param userId     * @param pictureItemId     * @return     */    @Override    public DownLoadPictureLog create(Integer userId, Integer pictureItemId,Integer type) {        UserDTO userDTO = userService.finById(userId);        if(userDTO == null){            throw new ApiException(ResponseEnum.USER_NOT_EXIST);        }        if(DownloadPictureType.PICTURE_ITEM.getCode() == type){            PictureItem pictureItem = pictureItemService.findById(pictureItemId);            if(pictureItem == null){                throw new ApiException(ResponseEnum.PICTURE_ITEM_NOT_EXIST);            }        }        DownLoadPictureLog downLoadLog = new DownLoadPictureLog();        downLoadLog.setUserId(userId);        downLoadLog.setPictureItemId(pictureItemId);        downLoadLog.setType(type);        DownLoadPictureLog result = repository.save(downLoadLog);        if(result == null){            throw new ApiException(ResponseEnum.PICTURE_DOWNLOAD_LOG_FAIL);        }        return result;    }    /**     * 查询浏览列表     *     * @author yezi     * @param userId     * @param pageable     * @return     */    @Override    public Page<DownLoadPictureLog> list(Integer userId, Pageable pageable) {        Specification<DownLoadPictureLog> specification = new Specification<DownLoadPictureLog>() {            @Override            public Predicate toPredicate(Root<DownLoadPictureLog> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {                List<Predicate> predicateList = new ArrayList<>();                predicateList.add(criteriaBuilder.equal(root.get("userId"),userId));                return criteriaBuilder.and(predicateList.toArray(new Predicate[predicateList.size()]));            }        };        Page<DownLoadPictureLog> pages = repository.findAll(specification,pageable);        return pages;    }}