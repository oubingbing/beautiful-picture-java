package com.kucaroom.mypicture.service.impl;import com.kucaroom.mypicture.DTO.UserDTO;import com.kucaroom.mypicture.convert.DownloadPictureLogToRO;import com.kucaroom.mypicture.domain.CollectPictureLog;import com.kucaroom.mypicture.domain.DownLoadPictureLog;import com.kucaroom.mypicture.domain.Picture;import com.kucaroom.mypicture.domain.PictureItem;import com.kucaroom.mypicture.enums.CollectPictureTypeEnum;import com.kucaroom.mypicture.enums.DownloadPictureTypeEnum;import com.kucaroom.mypicture.enums.ResponseEnum;import com.kucaroom.mypicture.exception.ApiException;import com.kucaroom.mypicture.mapper.CollectPictureMapper;import com.kucaroom.mypicture.mapper.DownloadPictureMapp;import com.kucaroom.mypicture.mapper.PictureItemMapper;import com.kucaroom.mypicture.mapper.PictureMapper;import com.kucaroom.mypicture.repository.DownLoadPictureLogRepository;import com.kucaroom.mypicture.responseObject.DownloadPictureRO;import com.kucaroom.mypicture.service.DownloadPictureLogService;import com.kucaroom.mypicture.service.PictureItemService;import com.kucaroom.mypicture.service.UserService;import com.kucaroom.mypicture.util.PictureInfoUtil;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.domain.Specification;import org.springframework.stereotype.Service;import javax.persistence.criteria.CriteriaBuilder;import javax.persistence.criteria.CriteriaQuery;import javax.persistence.criteria.Predicate;import javax.persistence.criteria.Root;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;@Slf4j@Servicepublic class DownloadPictureLogServiceImpl implements DownloadPictureLogService {    @Autowired    private DownLoadPictureLogRepository repository;    @Autowired    private PictureMapper pictureMapper;    @Autowired    private PictureItemMapper pictureItemMapper;    @Autowired    private CollectPictureMapper collectPictureMapper;    @Autowired    private UserService userService;    @Autowired    private PictureItemService pictureItemService;    @Autowired    private DownloadPictureMapp downloadPictureMapp;    /**     * 保存图片下载记录     *     * @author yezi     * @param userId     * @param pictureItemId     * @return     */    @Override    public DownLoadPictureLog create(Integer userId, Integer pictureItemId,Integer type) {        UserDTO userDTO = userService.finById(userId);        if(userDTO == null){            throw new ApiException(ResponseEnum.USER_NOT_EXIST);        }        DownLoadPictureLog downLoadPicture = downloadPictureMapp.findByUser(userId,pictureItemId);        if(downLoadPicture == null){            if(DownloadPictureTypeEnum.PICTURE_ITEM.getCode() == type){                PictureItem pictureItem = pictureItemService.findById(pictureItemId);                if(pictureItem == null){                    throw new ApiException(ResponseEnum.PICTURE_ITEM_NOT_EXIST);                }            }            DownLoadPictureLog downLoadLog = new DownLoadPictureLog();            downLoadLog.setUserId(userId);            downLoadLog.setPictureItemId(pictureItemId);            downLoadLog.setType(type);            downLoadLog.setNumber(1);            DownLoadPictureLog result = repository.save(downLoadLog);            if(result == null){                throw new ApiException(ResponseEnum.PICTURE_DOWNLOAD_LOG_FAIL);            }            return result;        }else{            downLoadPicture.setNumber(downLoadPicture.getNumber() + 1);            return  repository.save(downLoadPicture);        }    }    /**     * 查询浏览列表     *     * @author yezi     * @param userId     * @param pageable     * @return     */    @Override    public Page<DownLoadPictureLog> list(Integer userId, Pageable pageable) {        Specification<DownLoadPictureLog> specification = new Specification<DownLoadPictureLog>() {            @Override            public Predicate toPredicate(Root<DownLoadPictureLog> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {                List<Predicate> predicateList = new ArrayList<>();                predicateList.add(criteriaBuilder.equal(root.get("userId"),userId));                return criteriaBuilder.and(predicateList.toArray(new Predicate[predicateList.size()]));            }        };        Page<DownLoadPictureLog> pages = repository.findAll(specification,pageable);        return pages;    }    /**     * 获取下载图片的信息     *     * @param downloadLogs     * @return     */    public List<DownloadPictureRO> getPictureInfo(List<DownLoadPictureLog> downloadLogs){        List<Picture> pictureList;        List<PictureItem> pictureItemList;        List<Integer> pictureIds = new ArrayList<>();        List<Integer> pictureItemIds = new ArrayList<>();        List<DownloadPictureRO> downloadPictureROList = DownloadPictureLogToRO.convert(downloadLogs);        for (DownloadPictureRO downItem:downloadPictureROList){            if(downItem.getType() == DownloadPictureTypeEnum.PICTURE.getCode()){                pictureIds.add(downItem.getPictureItemId());            }else{                pictureItemIds.add(downItem.getPictureItemId());            }        }        log.info("pictureIds:{}",StringUtils.strip(pictureIds.toString()));        log.info("pictureItemsIds:{}",StringUtils.strip(pictureItemIds.toString()),"[]");        //获取图集的图片信息        if(!pictureIds.isEmpty()){            pictureList = pictureMapper.findInIds(StringUtils.strip(pictureIds.toString(),"[]"));            if(!pictureList.isEmpty()){                for (Picture picture:pictureList){                    for (DownloadPictureRO downItem:downloadPictureROList){                        if(picture.getId() == downItem.getPictureItemId()                                && downItem.getType() == DownloadPictureTypeEnum.PICTURE.getCode()){                            Map<String,Object> map = new HashMap<>();                            map.put("url",picture.getCoverPicture());                            map.put("width",picture.getCoverWidth());                            map.put("height",picture.getCoverHeight());                            map.put("id",picture.getId());                            downItem.setPictureInfo(map);                        }                    }                }            }        }        //获取封面的图片信息        if(!pictureItemIds.isEmpty()){            pictureItemList = pictureItemMapper.findByInIds(StringUtils.strip(pictureItemIds.toString(),"[]"));            if(!pictureItemList.isEmpty()){                for (PictureItem pictureItem:pictureItemList){                    for (DownloadPictureRO downloadPictureRO:downloadPictureROList){                        if(pictureItem.getId() == downloadPictureRO.getPictureItemId()                                && downloadPictureRO.getType() == DownloadPictureTypeEnum.PICTURE_ITEM.getCode()){                            downloadPictureRO.setPictureInfo(PictureInfoUtil.setPictureInfo(pictureItem));                        }                    }                }            }        }        return downloadPictureROList;    }    /**     * 检测图片是否已被用户收藏     *     * @param userId     * @param downloadPictureROList     * @return     */    public List<DownloadPictureRO> checkCollect(Integer userId, List<DownloadPictureRO> downloadPictureROList){        List<Integer> pictureItemIds = new ArrayList<>();        for (DownloadPictureRO downloadPictureRO:downloadPictureROList){            pictureItemIds.add(downloadPictureRO.getPictureItemId());        }        if(!pictureItemIds.isEmpty()){            List<CollectPictureLog> collectPictureLogList = collectPictureMapper.findByIds(userId,StringUtils.strip(pictureItemIds.toString(),"[]"));            if(!collectPictureLogList.isEmpty()){                for (CollectPictureLog collectItem:collectPictureLogList){                    for (DownloadPictureRO downloadPictureRO:downloadPictureROList){                        if(collectItem.getPictureItemId() == downloadPictureRO.getPictureItemId()){                            downloadPictureRO.setCollect(CollectPictureTypeEnum.COLLECT.getCode());                        }                    }                }            }        }        return downloadPictureROList;    }}