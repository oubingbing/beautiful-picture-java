package com.kucaroom.mypicture.controller;import com.kucaroom.mypicture.DTO.PictureDTO;import com.kucaroom.mypicture.DTO.QiNiuAccountDTO;import com.kucaroom.mypicture.DTO.UserDTO;import com.kucaroom.mypicture.DTO.WeChatAppDTO;import com.kucaroom.mypicture.converter.PictureDTOPictureRes;import com.kucaroom.mypicture.converter.PictureFormToPictureDTO;import com.kucaroom.mypicture.converter.UserDTOToUserRes;import com.kucaroom.mypicture.domain.Picture;import com.kucaroom.mypicture.enums.ResponseEnum;import com.kucaroom.mypicture.exception.WebApiException;import com.kucaroom.mypicture.form.PictureForm;import com.kucaroom.mypicture.responseObject.PictureItemRes;import com.kucaroom.mypicture.responseObject.PictureRes;import com.kucaroom.mypicture.responseObject.UserRes;import com.kucaroom.mypicture.responseObject.WeChatAppRes;import com.kucaroom.mypicture.service.*;import com.kucaroom.mypicture.util.PageUtil;import com.kucaroom.mypicture.util.ResponseData;import com.kucaroom.mypicture.util.ResponseUtil;import lombok.extern.slf4j.Slf4j;import net.sf.json.JSONObject;import org.apache.shiro.SecurityUtils;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Controller;import org.springframework.transaction.annotation.Transactional;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.HttpServletRequest;import javax.validation.Valid;import java.util.HashMap;import java.util.List;import java.util.Map;@Slf4j@Controller@RequestMapping("/admin")public class AdminController {    @Autowired    private QiNiuService qiNiuService;    @Autowired    private PictureService pictureService;    @Autowired    private PictureItemsService pictureItemsService;    @Autowired    private UserService userService;    @Autowired    private WeChatAppService weChatAppService;    /**     * 控制台主页     *     * @author yezi     * @return     */    @GetMapping("")    public ModelAndView index(){        String email = (String) SecurityUtils.getSubject().getPrincipal();        return new ModelAndView("/admin/index");    }    /**     * 控制台主界面     *     * @author yezi     * @return     */    @GetMapping("/dashboard")    public ModelAndView dashboard(){        return new ModelAndView("/admin/dashboard");    }    /**     * 上传图集界面     *     * @author yezi     * @return     */    @GetMapping("/upload")    public ModelAndView uploadPicture(){        return new ModelAndView("/admin/upload");    }    /**     * 上传图集     *     * @author yezi     * @param pictureForm     * @param bindingResult     * @return     */    @Transactional    @ResponseBody    @PostMapping("/upload")    public ResponseData upload(@Valid PictureForm pictureForm, BindingResult bindingResult){        if(bindingResult.hasErrors()){            throw new WebApiException(ResponseEnum.PICTURE_UPLOAD_ERROR.getCode(),bindingResult.getFieldError().getDefaultMessage());        }        PictureDTO pictureDTO = PictureFormToPictureDTO.convert(pictureForm);        pictureDTO.setAppId(74);        PictureDTO result = pictureService.create(pictureDTO);        if(result == null){            throw new WebApiException(ResponseEnum.PICTURE_CREATE_ERROR);        }        //装换数据格式        PictureRes response = PictureDTOPictureRes.convert(result);        return ResponseUtil.success(response);    }    /**     * 获取七牛token     *     * @author yezi     * @return     */    @ResponseBody    @GetMapping("/token")    public ResponseData uploadToken(){        String token = qiNiuService.getToken(74);        QiNiuAccountDTO qiNiuAccountDTO = qiNiuService.findByAppId(74);        if(qiNiuAccountDTO == null){            throw new WebApiException(ResponseEnum.QI_NIU_NOT_EXIST);        }        Map<String,String> map = new HashMap<>();        map.put("token",token);        map.put("domain",qiNiuAccountDTO.getUrl());        return ResponseUtil.success(map);    }    @GetMapping("/pictures")    public ModelAndView pictureList(HttpServletRequest request){        //Integer appId = (Integer)request.getAttribute("appId");        //log.info("appId:{}",appId);        return new ModelAndView("/admin/pictures");    }    @ResponseBody    @GetMapping("/picture/list")    public ResponseData<List<PictureDTO>> pictureList(@RequestParam(value = "pageNumber",defaultValue = "0")Integer pageNumber,                                                      @RequestParam(value = "pageSize",defaultValue = "20")Integer pageSize,                                                      HttpServletRequest request){        //Integer appId = (Integer)request.getAttribute("appId");        Integer appId = 74;        Sort sort = new Sort(Sort.Direction.DESC, "createAt");        PageRequest pageRequest = new PageRequest(pageNumber-1,pageSize,sort);        Page<PictureDTO> pictureDTOS = pictureService.findByAppId(pageRequest,appId);        List<PictureRes> pictureResList = PictureDTOPictureRes.convert(pictureDTOS.getContent());        return ResponseUtil.success(PageUtil.convert(pictureResList,pictureDTOS));    }    @GetMapping("/picture/detail")    public ModelAndView detailView(@RequestParam(value = "id")Integer id){        Map<String,Object> map = new HashMap<>();        map.put("id",id);        return new ModelAndView("/admin/pictureDetail",map);    }    @ResponseBody    @GetMapping("/picture/{id}/detail")    public ResponseData<List<PictureItemRes>> detail(@PathVariable(value = "id")Integer id){        List<PictureItemRes> list = pictureItemsService.findByPictureId(id);        return ResponseUtil.success(list);    }    @Transactional    @ResponseBody    @DeleteMapping("/picture_item/delete/{id}")    public ResponseData deletePictureDetail(@PathVariable(value = "id")Integer id,HttpServletRequest request){        //Integer appId = (Integer)request.getAttribute("appId");        Integer appId = 74;        Boolean result = pictureItemsService.delete(appId,id);        return ResponseUtil.success(true);    }    @Transactional    @ResponseBody    @DeleteMapping("/picture/delete/{id}")    public ResponseData deletePicture(@PathVariable(value = "id")Integer id,HttpServletRequest request){        //Integer appId = (Integer)request.getAttribute("appId");        Integer appId = 74;        Integer result = pictureService.deleteById(appId,id);        return ResponseUtil.success(result);    }    @ResponseBody    @PostMapping("/picture/status/{id}")    public ResponseData changePictureStatus(@PathVariable(value = "id")Integer id,                                            @RequestBody JSONObject jsonObject,                                            HttpServletRequest request){        Integer status = (Integer) jsonObject.get("status");        //Integer appId = (Integer)request.getAttribute("appId");        Integer appId = 74;        Picture picture = pictureService.updateStatus(appId,id,status);        PictureDTO pictureDTO = new PictureDTO();        BeanUtils.copyProperties(picture,pictureDTO);        return ResponseUtil.success(pictureDTO);    }    @GetMapping("/users")    public ModelAndView userView(){        return new ModelAndView("/admin/user");    }    @ResponseBody    @GetMapping("/user/list")    public ResponseData<List<UserRes>> users(@RequestParam(value = "pageNumber",defaultValue = "0")Integer pageNumber,                                    @RequestParam(value = "pageSize",defaultValue = "20")Integer pageSize){        Sort sort = new Sort(Sort.Direction.DESC, "createAt");        PageRequest pageable = new PageRequest(pageNumber-1,pageSize,sort);        Integer appId = 74;        Page<UserDTO> userDTOS = userService.users(appId,pageable);        List<UserRes> userRes = UserDTOToUserRes.convert(userDTOS.getContent());        return ResponseUtil.success(PageUtil.convert(userRes,userDTOS));    }    @ResponseBody    @GetMapping("/app/info")    public ResponseData<WeChatAppRes> appInfo(HttpServletRequest request){        //Integer appId = (Integer)request.getAttribute("appId");        Integer appId = 74;        Integer adminId = 11;        WeChatAppDTO weChatAppDTO = weChatAppService.findByAdminId(adminId);        WeChatAppRes weChatAppRes = new WeChatAppRes();        BeanUtils.copyProperties(weChatAppDTO,weChatAppRes);        QiNiuAccountDTO qiNiuAccountDTO = qiNiuService.findByAppId(appId);        weChatAppRes.setQiNiuDomain(qiNiuAccountDTO.getUrl());        return ResponseUtil.success(weChatAppRes);    }}