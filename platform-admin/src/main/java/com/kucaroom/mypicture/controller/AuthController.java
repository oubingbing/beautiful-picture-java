package com.kucaroom.mypicture.controller;import com.kucaroom.mypicture.DTO.AdminDTO;import com.kucaroom.mypicture.converter.AdminFormToAdminDTO;import com.kucaroom.mypicture.enums.ResponseEnum;import com.kucaroom.mypicture.exception.WebApiException;import com.kucaroom.mypicture.form.AdminForm;import com.kucaroom.mypicture.form.LoginForm;import com.kucaroom.mypicture.responseObject.AdminRes;import com.kucaroom.mypicture.service.AdminService;import com.kucaroom.mypicture.service.AuthService;import com.kucaroom.mypicture.util.ResponseData;import com.kucaroom.mypicture.util.ResponseUtil;import lombok.extern.slf4j.Slf4j;import org.apache.shiro.SecurityUtils;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.ModelAndView;import javax.validation.Valid;@Slf4j@Controller@RequestMapping("/auth")public class AuthController {    @Autowired    private AdminService adminService;    @Autowired    private AuthService authService;    /**     * 注册视图     *     * @author yezi     * @return     */    @GetMapping("/register")    public ModelAndView register(){        return  new ModelAndView("auth/register");    }    /**     * 注册     *     * @author yezi     * @param adminForm     * @param bindingResult     * @return     */    @ResponseBody    @PostMapping("/register")    public ResponseData register(@Valid AdminForm adminForm, BindingResult bindingResult){        if(bindingResult.hasErrors()){            throw new WebApiException(ResponseEnum.ADMIN_REGISTER_FAIL.getCode(),bindingResult.getFieldError().getDefaultMessage());        }        if(!adminForm.getPassword().equals(adminForm.getPasswordConfirmation())){            log.info("密码：{}，确认密码：{}",adminForm.getPassword(),adminForm.getPasswordConfirmation());            throw new WebApiException(ResponseEnum.ADMIN_PASSWORD_ERROR);        }        AdminDTO adminDTO = AdminFormToAdminDTO.convert(adminForm);        AdminDTO result = adminService.create(adminDTO);        AdminRes adminRes = new AdminRes();        BeanUtils.copyProperties(result,adminRes);        return ResponseUtil.success(result);    }    /**     * 登录视图     *     * @author yezi     * @return     */    @GetMapping("/login")    public ModelAndView login(){        return new ModelAndView("/auth/login");    }    /**     * 登录     *     * @author yezi     * @param loginForm     * @param bindingResult     * @return     */    @ResponseBody    @PostMapping("/login")    public ResponseData login(@Valid LoginForm loginForm,BindingResult bindingResult){        if(bindingResult.hasErrors()){            throw new WebApiException(ResponseEnum.ADMIN_LOGIN_ERROR.getCode(),bindingResult.getFieldError().getDefaultMessage());        }        /*if(SecurityUtils.getSubject().isAuthenticated()){            throw new WebApiException(ResponseEnum.ADMIN_LOGIN_REPEAT);        }*/        Boolean loginResult = authService.login(loginForm.getEmail(),loginForm.getPassword());        return ResponseUtil.success(loginResult);    }    @GetMapping("/logout")    public ModelAndView logout(){        authService.logout();        return new ModelAndView("/home/index");    }}