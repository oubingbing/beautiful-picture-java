package com.kucaroom.mypicture.service.impl;import com.kucaroom.mypicture.service.AuthService;import com.kucaroom.mypicture.shiro.realm.CustomRealm;import com.kucaroom.mypicture.util.MD5Util;import lombok.extern.slf4j.Slf4j;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.authc.credential.HashedCredentialsMatcher;import org.apache.shiro.mgt.DefaultSecurityManager;import org.apache.shiro.subject.Subject;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Slf4j@Servicepublic class AuthServiceImpl implements AuthService {    @Autowired    private CustomRealm customRealm;    private Subject currentUser;    @Override    public Boolean login(String email, String password) {        try{            //设置securityManager环境            DefaultSecurityManager defaultSecurityManager = new DefaultSecurityManager();            defaultSecurityManager.setRealm(customRealm);            //加密            HashedCredentialsMatcher matcher = new HashedCredentialsMatcher();            matcher.setHashAlgorithmName("md5");            matcher.setHashIterations(MD5Util.hashIterations);            customRealm.setCredentialsMatcher(matcher);            //主体提交认证请求            SecurityUtils.setSecurityManager(defaultSecurityManager);            Subject subject = SecurityUtils.getSubject();            UsernamePasswordToken usernamePasswordToken = new UsernamePasswordToken(email,password);            subject.login(usernamePasswordToken);            this.currentUser = subject;            log.info("登录结果：{}",subject.isAuthenticated());            return subject.isAuthenticated();        }catch (Exception e){            log.info("登录失败！");            log.info("异常信息:{}",e.getMessage());        }        return false;    }    /**     * 退出登录     *     * @author yezi     */    @Override    public void logout() {        currentUser.logout();    }    /**     * 是否是认证用户     *     * @author yezi     * @return     */    @Override    public Boolean isAuthenticated() {        return currentUser.isAuthenticated();    }    /**     * 获取认证用户     *     * @author yezi     * @return     */    @Override    public String loginUser() {        return (String) currentUser.getPrincipal();    }}