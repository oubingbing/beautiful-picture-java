package com.kucaroom.mypicture.service.impl;import com.kucaroom.mypicture.DTO.QiNiuAccountDTO;import com.kucaroom.mypicture.domain.QiNiuAcctount;import com.kucaroom.mypicture.enums.QiNiuTypeEnum;import com.kucaroom.mypicture.enums.ResponseEnum;import com.kucaroom.mypicture.exception.WebApiException;import com.kucaroom.mypicture.repository.QiNiuAccountRepository;import com.kucaroom.mypicture.service.QiNiuService;import com.kucaroom.mypicture.util.DateUtil;import com.kucaroom.mypicture.util.QiNiuUtil;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.util.StringUtils;import java.text.SimpleDateFormat;import java.util.Date;@Slf4j@Servicepublic class QiNiuAccountImpl implements QiNiuService {    @Autowired    private QiNiuAccountRepository qiNiuAccountRepository;    /**     * 新建七牛账号     *     * @param qiNiuAccountDTO     * @return     */    @Override    public QiNiuAccountDTO create(QiNiuAccountDTO qiNiuAccountDTO) {        QiNiuAcctount qiNiuAcctount = new QiNiuAcctount();        //获取七牛token        String token = QiNiuUtil.getToken(qiNiuAccountDTO.getAccessKey(),qiNiuAccountDTO.getSecretKey(),qiNiuAccountDTO.getBucketName());        if(token == null){            throw new WebApiException(ResponseEnum.QI_NIU_GET_TOKEN_ERROR);        }        qiNiuAccountDTO.setToken(token);        qiNiuAccountDTO.setExpireAt(getTokenExpireDate());        BeanUtils.copyProperties(qiNiuAccountDTO,qiNiuAcctount);        QiNiuAcctount result = qiNiuAccountRepository.save(qiNiuAcctount);        if(result == null){            throw new WebApiException(ResponseEnum.QI_NIU_CREATE_FAIL);        }        qiNiuAccountDTO.setId(result.getId());        BeanUtils.copyProperties(qiNiuAcctount,qiNiuAccountDTO);        return qiNiuAccountDTO;    }    /**     * 查询七牛账号信息     *     * @author yezi     * @param appId     * @return     */    @Override    public QiNiuAccountDTO findByAppId(Integer appId) {        QiNiuAcctount qiNiuAccount = qiNiuAccountRepository.findByAppId(appId);        if(qiNiuAccount != null){            QiNiuAccountDTO qiNiuAccountDTO = new QiNiuAccountDTO();            BeanUtils.copyProperties(qiNiuAccount,qiNiuAccountDTO);            return qiNiuAccountDTO;        }        return null;    }    /**     * 获取token，如果过期了就重新请求七牛服务器     *     * @author yezi     * @param appId     * @return     */    @Override    public String getToken(Integer appId) {        QiNiuAccountDTO qiNiuAccountDTO = this.findAccountByAppId(appId);        if(qiNiuAccountDTO == null){            throw new WebApiException(ResponseEnum.QI_NIU_NOT_EXIST);        }        String currentDate = DateUtil.currentDate();        String expireDate = qiNiuAccountDTO.getExpireAt();        Boolean compareResult = DateUtil.compareDate(currentDate,expireDate);        if(compareResult || StringUtils.isEmpty(qiNiuAccountDTO.getToken())){            //当前日期大于token过期日期,更新token            String token = this.refreshToken(appId);            return token;        }else{            return  qiNiuAccountDTO.getToken();        }    }    /**     * 刷新七牛token     *     * @author yezi     * @param appId     * @return     */    @Override    public String refreshToken(Integer appId){        QiNiuAccountDTO qiNiuAccountDTO = this.findAccountByAppId(appId);        if(qiNiuAccountDTO == null){            throw new WebApiException(ResponseEnum.QI_NIU_NOT_EXIST);        }        String token = QiNiuUtil.getToken(qiNiuAccountDTO.getAccessKey(),qiNiuAccountDTO.getSecretKey(),qiNiuAccountDTO.getBucketName());        if(token == null){            throw new WebApiException(ResponseEnum.QI_NIU_GET_TOKEN_ERROR);        }        qiNiuAccountDTO.setToken(token);        QiNiuAcctount qiNiuAcctount = new QiNiuAcctount();        BeanUtils.copyProperties(qiNiuAccountDTO,qiNiuAcctount);        qiNiuAcctount.setExpireAt(getTokenExpireDate());        qiNiuAccountRepository.save(qiNiuAcctount);        return token;    }    @Override    public String domain(Integer appId) {        String domain;        QiNiuAccountDTO qiNiuAccountDTO = this.findByAppId(appId);        if(qiNiuAccountDTO == null){            QiNiuAccountDTO qiNiuAcctount = this.findAccountByAppId(appId);            domain = qiNiuAcctount.getDomain();        }else{            domain = qiNiuAccountDTO.getDomain();        }        return domain;    }    @Override    public QiNiuAccountDTO findAccountByAppId(Integer appId) {        QiNiuAccountDTO qiNiuAccountDTO = this.findByAppId(appId);        if(qiNiuAccountDTO == null){            QiNiuAcctount qiNiuAcctount = qiNiuAccountRepository.findByType(QiNiuTypeEnum.DEFAULT.getCode());            QiNiuAccountDTO resultDTO = new QiNiuAccountDTO();            BeanUtils.copyProperties(qiNiuAcctount,resultDTO);            return resultDTO;        }        return qiNiuAccountDTO;    }    /**     * 获取过期时间     *     * @author yezi     * @return     */    private String getTokenExpireDate(){        long expireSecond = System.currentTimeMillis() + 3600000 * 24;        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        String expireTime = dateFormat.format(new Date(expireSecond));        return expireTime;    }}