package com.kucaroom.mypicture.service.impl;import com.kucaroom.mypicture.DTO.PictureDTO;import com.kucaroom.mypicture.converter.PictureItemToRes;import com.kucaroom.mypicture.domain.PictureItem;import com.kucaroom.mypicture.enums.DownloadPictureTypeEnum;import com.kucaroom.mypicture.enums.ResponseEnum;import com.kucaroom.mypicture.enums.ViewPictureTypeEnum;import com.kucaroom.mypicture.exception.WebApiException;import com.kucaroom.mypicture.mapper.PictureItemMapper;import com.kucaroom.mypicture.repository.PictureItemsRepository;import com.kucaroom.mypicture.responseObject.PictureItemRes;import com.kucaroom.mypicture.service.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;import java.util.Optional;@Servicepublic class PictureItemServiceImpl implements PictureItemsService {    @Autowired    private PictureItemsRepository pictureItemsRepository;    @Autowired    private PictureService pictureService;    @Autowired    private CollectPictureLogService collectPictureLogService;    @Autowired    private PictureItemMapper pictureItemMapper;    @Autowired    private DownloadPictureService downloadPictureService;    @Autowired    private ViewPictureLogService viewPictureLogService;    @Override    public List<PictureItemRes> findByPictureId(Integer pictureId) {        List<PictureItem> pictureItems = pictureItemsRepository.findByPictureId(pictureId);        return PictureItemToRes.convert(pictureItems);    }    /**     * 删除单张图片     *     * @param appId     * @param pictureItemId     * @return     */    @Transactional    @Override    public Boolean delete(Integer appId,Integer pictureItemId){        Optional<PictureItem> pictureItemOptional = pictureItemsRepository.findById(pictureItemId);        if(!pictureItemOptional.isPresent()){            throw new WebApiException(ResponseEnum.PICTURE_ITEM_NOT_EXIST);        }        //确认用户是否是同一个小程序        PictureItem pictureItem = pictureItemOptional.get();        PictureDTO picture = pictureService.findById(pictureItem.getPictureId());        if(picture.getAppId() != appId){            throw new WebApiException(ResponseEnum.NOT_AUTH);        }        //删除图片        Integer deleteResult = pictureItemMapper.deleteById(pictureItem.getId());        if(deleteResult <= 0){            throw new WebApiException(ResponseEnum.PICTURE_ITEM_DELETE_FAIL);        }        //删除收藏记录        collectPictureLogService.deleteByPictureItemId(pictureItemId);        //删除下载记录        downloadPictureService.deleteByPictureItemIdAndType(pictureItemId,DownloadPictureTypeEnum.PICTURE_ITEM.getCode());        //删除浏览记录        viewPictureLogService.deleteByPictureIdAndType(pictureItemId,ViewPictureTypeEnum.PICTURE_ITEM.getCode());        return true;    }    @Override    public Boolean deleteByPictureId(Integer pictureId){        Integer result = pictureItemMapper.deleteByPictureId(pictureId);        return true;    }}