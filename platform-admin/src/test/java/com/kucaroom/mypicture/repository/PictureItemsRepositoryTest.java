package com.kucaroom.mypicture.repository;import com.kucaroom.mypicture.domain.Picture;import com.kucaroom.mypicture.domain.PictureItem;import lombok.extern.slf4j.Slf4j;import org.junit.Assert;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.domain.Specification;import org.springframework.test.context.junit4.SpringRunner;import javax.persistence.criteria.CriteriaBuilder;import javax.persistence.criteria.CriteriaQuery;import javax.persistence.criteria.Predicate;import javax.persistence.criteria.Root;import java.util.ArrayList;import java.util.List;import static org.junit.Assert.*;@Slf4j@SpringBootTest@RunWith(SpringRunner.class)public class PictureItemsRepositoryTest {    @Autowired    private PictureItemsRepository pictureItemsRepository;    @Test    public void create(){        PictureItem pictureItem = new PictureItem();        pictureItem.setPictureId(3);        pictureItem.setPicture("u=1574739706,1439120121&fm=27&gp=0.jpg");        PictureItem result = pictureItemsRepository.save(pictureItem);        Assert.assertNotNull(result);    }    @Test    public void saveAllTest(){        List<PictureItem> pictureItems = new ArrayList<>();        PictureItem pictureItem1 = new PictureItem();        pictureItem1.setPictureId(3);        pictureItem1.setPicture("u=1574739706,1439120121&fm=27&gp=0.jpg");        pictureItems.add(pictureItem1);        PictureItem pictureItem2 = new PictureItem();        pictureItem2.setPictureId(3);        pictureItem2.setPicture("u=1574739706,1439120121&fm=27&gp=0.jpg");        pictureItems.add(pictureItem2);        List<PictureItem> result = pictureItemsRepository.saveAll(pictureItems);        log.info("结果：{}",result.toString());        Assert.assertNotNull(result);    }    @Test    public void findAllTest(){        List<PictureItem> pictureList = pictureItemsRepository.findAll(new Specification<PictureItem>() {           @Override           public Predicate toPredicate(Root<PictureItem> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {               List<Predicate> predicates = new ArrayList<>();               predicates.add(criteriaBuilder.equal(root.get("status"),0));               //predicates.add(criteriaBuilder.equal(root.get("pictureId"),3));               return criteriaBuilder.and(predicates.toArray(new Predicate[predicates.size()]));           }       });        log.info(pictureList.toString());        Assert.assertNotNull(pictureList);    }    @Test    public void findAllPageTest(){        Pageable pageable = new PageRequest(0,10);        Specification<PictureItem> specification = new Specification<PictureItem>() {            @Override            public Predicate toPredicate(Root<PictureItem> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {                List<Predicate> predicates = new ArrayList<>();                predicates.add(criteriaBuilder.equal(root.get("status"),0));                //predicates.add(criteriaBuilder.equal(root.get("pictureId"),3));                return criteriaBuilder.and(predicates.toArray(new Predicate[predicates.size()]));            }        };        Page<PictureItem> pictureList = pictureItemsRepository.findAll(specification,pageable);        log.info(pictureList.getContent().toString());        Assert.assertNotNull(pictureList.getContent());    }    @Test    public void delete(){        /*PictureItem result = pictureItemsRepository.deleteByIdAndPictureId(122,36);        log.info("结果:{}",result);*/    }}